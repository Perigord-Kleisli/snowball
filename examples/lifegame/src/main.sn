// Life game

import std::io;

const MAX_CELLS: i32 = 50;

class Board {
  let mut cells: Vector<Vector<bool>>;
  public:
    Board() {
      self.cells = new Vector<Vector<bool>>();
      for let i = 0; i < MAX_CELLS; i = i+1 {
        self.cells.push(new Vector<bool>());
        for let j = 0; j < MAX_CELLS; j = j+1 {
          self.cells[i].push(false);
        }
      }
    }

    func all_dead() bool {
      for let i = 0; i < MAX_CELLS; i=i+1 {
        for let j = 0; j < MAX_CELLS; j=j+1 {
          if self.cells[i][j] {
            return false;
          }
        }
      }
      return true;
    }

    func set_cell(x: i32, y: i32, alive: bool) {
      self.cells[x][y] = alive;
    }
}

class Game {
  let mut board: Board;
  public:
    Game() {
      self.board = new Board();
    }

    func set_cell(x: i32, y: i32, alive: bool) {
      self.board.set_cell(x, y, alive);
    }

    func next() {
      let mut next_board = new Board();
      for let i = 0; i < MAX_CELLS; i = i+1 {
        for let j = 0; j < MAX_CELLS; j = j+1 {
          let mut count = 0;
          for let dx = -1; dx <= 1; dx = dx+1 {
            for let dy = -1; dy <= 1; dy = dy+1 {
              if dx == 0 && dy == 0 {
                continue;
              }
              let nx = i + dx;
              let ny = j + dy;
              if nx < 0 || nx >= MAX_CELLS || ny < 0 || ny >= MAX_CELLS {
                continue;
              }
              if self.board.cells[nx][ny] {
                count = count + 1;
              }
            }
          }
          if self.board.cells[i][j] {
            if count == 2 || count == 3 {
              next_board.set_cell(i, j, true);
            }
          } else {
            if count == 3 {
              next_board.set_cell(i, j, true);
            }
          }
        }
      }
      self.board = next_board;
    }

    func print() {
      io::println("\n======== WHOP WHOP ===========\n");
      for let i = 0; i < MAX_CELLS; i = i+1 {
        for let j = 0; j < MAX_CELLS; j = j+1 {
          if self.board.cells[i][j] {
            io::print("██");
          } else {
            io::print("▒▒");
          }
        }
        io::println("");
      }
    }

    func run() {
      while !self.board.all_dead() {
        self.print();
        self.next();
        if self.board.all_dead() {
          self.print();
          break;
        }
      }
    }
}

public func main() i32 {
  let mut game = new Game();
  game.set_cell(0,1, true);
  game.set_cell(1,2, true);
  game.set_cell(2,0, true);
  game.set_cell(2,1, true);
  game.set_cell(2,2, true);
  game.run();
}
