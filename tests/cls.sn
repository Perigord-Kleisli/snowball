
namespace test {
class Test {
  public:
    Test() {}
    let succ: bool = true;
}

func [[test]] init_heap() i32 {
  let t = new Test();
  return t.succ;
}

class ValueAccessTest {
  public:
    let mut a: i32 = 0;
    ValueAccessTest() {}
}

func [[test(expect = 0)]] value_access() i32 {
  let t = new ValueAccessTest();
  return t.a;
}

func [[test]] value_access_set() i32 {
  let t = new ValueAccessTest();
  t.a = 1;
  return t.a;
}

class virtualTest {
  public:
    virtualTest() {}
    virtual func test() i32 {
      return true;
    }
  private:
    let a: i32 = 0;
    let b: i32 = 2;
}

func [[test]] virtual_stack() i32 {
  // TODO: what's going on here
  let t = new virtualTest();
  return t.test();
}

func [[test]] virtual_heap() i32 {
  let t = &new virtualTest();
  return t.test();
}

class TypeInsideClassTest {
  public:
    type x = virtualTest;
    TypeInsideClassTest() {}
}

func [[test]] type_inside_class() i32 {
  let t: TypeInsideClassTest::x = new virtualTest();
  return true;
}

class ClassGenericsTest<T> {
  public:
    ClassGenericsTest(x: T) {}
}

func [[test]] class_generics() i32 {
  let t = new ClassGenericsTest<i32>(1);
  return true;
}

class ClassDefaultGenericsTest<T = i32> {
  public:
    ClassDefaultGenericsTest(x: T) {}
}

func [[test]] class_default_generics() i32 {
  let t = new ClassDefaultGenericsTest<>(1);
  return true;
}

class GenericAccessTest<T> {
  public:
    let mut a: T = 0;
    GenericAccessTest() {}
}

func [[test(expect = 0)]] generic_access() i32 {
  let t = new GenericAccessTest<i32>();
  return t.a;
}

class InheritedOverridevirtualTest extends virtualTest {
  public:
    InheritedOverridevirtualTest() : super() {}
    virtual func test() i32 {
      return false;
    }
}

func [[test(expect = 0)]] inherited_override_virtual() i32 {
  let t = new InheritedOverridevirtualTest();
  return t.test();
}

func [[test(expect = 0)]] inherited_override_casted() i32 {
  let t = new InheritedOverridevirtualTest() as virtualTest;
  return t.test();
}

class InheritancevirtualTest extends virtualTest {
  public:
    InheritancevirtualTest() : super() {}
}

func [[test]] inheritance_virtual() i32 {
  let t = new InheritancevirtualTest();
  return t.test();
}

}
