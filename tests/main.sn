
//  Snowball compiler (MIT)                         ／l、
//    https://github.com/snowball-lang/snowball   （ﾟ､ ｡７
//                                                ⠀ l、ﾞ~ヽ 
//  Fibonacci example for the lang                  じし(_,)ノ
//  Docs: https://snowball-lang.gitbook.io/docs/
//

import pkg::cls;
import pkg::option;
import pkg::ranges;
import pkg::chars;
import pkg::vector;
import pkg::string;
import pkg::tuples as _tuples_test;
import pkg::syntax;
import pkg::algorithms;
import pkg::clib;
import pkg::interfaces;
import pkg::math;
import pkg::numbers;
import pkg::macros;
import pkg::source_location;
import pkg::lambdas;
import pkg::structs;
import pkg::path;
import pkg::files;
import pkg::map;
import pkg::iters;
import pkg::env;
import pkg::strings;
import pkg::enums;
import pkg::libs_include;

////import std::io::{{ println }};

import std::io;
import std::opt;
import std::tuples;
import std::env as os_env;

//import std::io::{ println };

enum JSON {
  JSONNull,
  JSONBool(bool),
  JSONString(String),
  JSONNum(f64),
  // JSONArray(Vector<JSON>),
  // JSONTable(Map<String, JSON>),
}

type ParserResult<T> = opt::Option<tuples::Pair<T,String>>;
type Parser<T> = Function<func(String) => ParserResult<T>>;

func mapPR<T,U>(f: Function<func(T) => U>, p: ParserResult<T>) ParserResult<U> {
    return new opt::Option<tuples::Pair<U,String>>();
}

func stringP(s_: String) Parser<String> {
    let s_temp = s_;
    return func(s: String) ParserResult<String> {
        if s_temp == s.substr(0..s_temp.size()) {
            return new opt::Option<tuples::Pair<String,String>>(
                new tuples::Pair<String,String>(s_temp, s.substr(s_temp.size()..s.size()))
            );

        } else {
            return new opt::Option<tuples::Pair<String,String>>();
        }
    }
}

func nullParser(s: String) ParserResult<JSON> {
    return mapPR<?String,JSON>(func(_: String) JSON {return JSON::JSONNull }
                              ,stringP("null")(s));
}

public func main() i32 {
}
