
namespace tests {

fn [[test(expect = 5)]] simple_return() i32 {
    return 5;
}

fn [[test]] if_statement() i32 {
    let a = 1;
    if a == 1 {
        return a;
    }

    return 0;
}

fn [[test]] if_else_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else {
        return 1;
    }
}

fn [[test]] if_else_if_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else if a == 1 {
        return 1;
    } else {
        return 0;
    }
}

fn [[test(expect = 10)]] while_statement() i32 {
    let mut a = 1;
    while a < 10 {
        a = a + 1;
    }

    return a;
}

fn [[test(expect = 10)]] do_while_statement() i32 {
    let mut a = 1;
    do {
        a = a + 1;
    } while a < 10;

    return a;
}

fn [[test(expect = 10)]] add() i32 {
    return 5 + 5;
}

fn [[test(expect = 0)]] sub() i32 {
    return 5 - 5;
}

fn [[test(expect = 25)]] mul() i32 {
    return 5 * 5;
}

fn [[test(expect = 1)]] div() i32 {
    return 5 / 5;
}

fn [[test(expect = 0)]] mod() i32 {
    return 5 % 5;
}

fn [[test(expect = 1)]] and() i32 {
    return 1 && 1;
}

fn [[test(expect = 1)]] or() i32 {
    return 1 || 1;
}

fn [[test(expect = 1)]] xor() i32 {
    return 1 ^ 0;
}

fn [[test(expect = 0)]] not() i32 {
    return !1;
}

fn [[test(expect = 1)]] eq() i32 {
    return 1 == 1;
}

fn [[test(expect = 0)]] neq() i32 {
    return 1 != 1;
}

fn [[test(expect = 1)]] gt() i32 {
    return 2 > 1;
}

fn [[test(expect = 1)]] lt() i32 {
    return 1 < 2;
}

fn [[test(expect = 1)]] gte() i32 {
    return 2 >= 1;
}

fn [[test(expect = 1)]] lte() i32 {
    return 1 <= 2;
}

fn [[test(expect = 2)]] lshift() i32 {
    return 1 << 1;
}

fn [[test(expect = 1, skip)]] rshift() i32 {
    // TODO:
    // return 2 >> 1;
}

}
