
#include "../../ir/values/Argument.h"
#include "../../ir/values/VariableDeclaration.h"
#include "../../utils/utils.h"
#include "LLVMBuilder.h"

#include <llvm/IR/Type.h>
#include <llvm/IR/Value.h>

namespace snowball {
namespace codegen {

void LLVMBuilder::visit(ir::VariableDeclaration* variable) {
  llvm::Value* store = nullptr;
  if (auto a = utils::cast<ir::Argument>(variable->getValue().get())) {
    auto id = a->getId();
    store = ctx->getSymbol(id);
  } else {
    auto id = variable->getId();
    store = ctx->getSymbol(id);
  }
  auto generatedValue = build(variable->getValue().get());
  auto pointer = utils::cast<types::ReferenceType>(variable->getType());
  auto storeBaseType = getLLVMType(variable->getType());
  if (pointer == nullptr && generatedValue->getType()->isPointerTy() && !generatedValue->getType()->isFunctionTy())
    generatedValue = builder->CreateLoad(storeBaseType, generatedValue, ".decl");

  // case: calling autogenerated parent constructor
  if (storeBaseType != generatedValue->getType() && storeBaseType->isPointerTy()) {
    generatedValue = builder->CreatePointerCast(generatedValue, storeBaseType);
  }

  //if (utils::cast<types::DefinedType>(variable->getType()) && llvm::isa<llvm::LoadInst>(generatedValue)) {
  //  generatedValue = llvm::cast<llvm::LoadInst>(generatedValue)->getOperand(0);
  //  builder->CreateMemCpy(generatedValue, llvm::MaybeAlign(), store, llvm::MaybeAlign(),
  //                        module->getDataLayout().getTypeAllocSize(storeBaseType), 0);
  //} else
    builder->CreateStore(generatedValue, store);
  //}
}

} // namespace codegen
} // namespace snowball
