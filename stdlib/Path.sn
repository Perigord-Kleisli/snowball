
// TODO: support all platforms
const path_sep: String = "/";

/**
 * A path to a file or directory.
 * 
 * This is a wrapper around a string that provides some useful
 * operations for manipulating paths.
 */
class Path implements ToString {
    /// The path as a string.
    let path: String;
  public:
    /**
     * Create a new path from a string.
     */
    Path(path: String) 
      : path(path) {}
    /**
     * @return The path as a string.
     */
    func [[inline]] to_string() String 
      { return path; }
    /**
     * @return The path as a C string.
     */
    func [[inline]] to_cstr() CString 
      { return path.c_str(); }
    /**
     * @brief Join two paths together.
     * @param other The path to join to this one.
     * @return The joined path.
     */ 
    func [[inline]] join(other: String) Path 
      { return Path(path + path_sep + other); }
    /**
     * @brief Join two paths together.
     * @param other The path to join to this one.
     * @return The joined path.
     */
    func [[inline]] join(other: Path) Path 
      { return join(other.to_string()); }

    operator ==(other: Path) bool 
      { return path == other.path; }
    operator !=(other: Path) bool 
      { return path != other.path; }
    operator <(other: Path) bool 
      { return path < other.path; }
    operator >(other: Path) bool 
      { return path > other.path; }
    operator <=(other: Path) bool 
      { return path <= other.path; }
    operator >=(other: Path) bool 
      { return path >= other.path; }
    operator /(other: Path) Path 
      { return join(other); }
    operator /(other: String) Path 
      { return join(other); }
    operator +(other: Path) Path 
      { return self + other.to_string(); }
    operator +(other: String) Path 
      { return Path(path + other); }

    func [[inline]] to_string() String 
      { return path; }
}
