
class Iterable<_IteratorType: Core::Sized> {
  pub:
    Iterable() {}
}

class Vector<_StoreType: Core::Sized>: Iterable<_StoreType> {
  pub:
    Vector() : super() {}

    fn push_back(value: _StoreType) {}
}

/**
 * @class StringView
 * @brief A class representing a string of characters.
 *
 * The StringView class provides various operations and functionalities
 * for working with strings of characters. It supports common StringView
 * manipulation operations such as concatenation, substring extraction,
 * length calculation, and more.
 *
 * @note The StringView class is designed to be efficient and memory-safe.
 *       It automatically manages the memory allocation and deallocation
 *       required for storing and manipulating strings.
 */
class StringView<_CharType: Core::Sized = char>: Iterable<_CharType> {
  pub:
    /**
     * @brief Default constructor.
     * Constructs an empty string.
     */
    StringView() : super() {
    }

  priv:
    
    /** The size of the string. */
    let mut size: i32 = 0;
    /** The buffer containing the string. */
    let buffer: _CharType*;
    /** The maximum size of the string. */
    let mut max_size: i32 = 0;
    /** The factor by which the buffer size is increased when it is full. */
    let factor: i32 = 2;
}

type String = StringView<>;
// TODO (implement wchar): using WideString as StringView<wchar*>

