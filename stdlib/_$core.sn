
class Iterable<_IteratorType> {
    Iterable() {}
}

class Array<_StoreType>: Iterable<?_StoreType> {
    Array() {}
}

/**
 * @class StringView
 * @brief A class representing a string of characters.
 *
 * The StringView class provides various operations and functionalities
 * for working with strings of characters. It supports common StringView
 * manipulation operations such as concatenation, substring extraction,
 * length calculation, and more.
 *
 * @note The StringView class is designed to be efficient and memory-safe.
 *       It automatically manages the memory allocation and deallocation
 *       required for storing and manipulating strings.
 */
class StringView<_CharType = char*>: Iterable<?_CharType> {
  pub:
    /**
     * @brief Default constructor.
     *
     * Constructs an empty string.
     */
    StringView() {
        self.size = 0;
        self.data = new Array<?_CharType>{};
    }

  priv:
    
    let mut size: i32;
    let data: Array<?_CharType>;
}

type String = StringView<?char*>;
// TODO (implement wchar): using WideString as StringView<?wchar*>

