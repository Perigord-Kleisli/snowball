

/**
 * Checks if a given floating-point number is NaN.
 *
 * @param x The floating-point number to check.
 * @return True if the given number is NaN, false otherwise.
 */
extern fn isnan(f64) Bool;
/**
 * Converts a string to a double-precision floating-point number.
 *
 * @param str The string to convert.
 * @param n The number of characters to consider.
 * @return The converted double-precision floating-point number.
 */
extern fn strtod(String, i32) f64;
/**
 * Checks if a given floating-point number is infinite.
 *
 * @param x The floating-point number to check.
 * @return True if the given number is infinite, false otherwise.
 */
extern fn isinf(f64) Bool;
/**
 * Computes the arctangent of the quotient of two given floating-point numbers.
 *
 * @param y The numerator.
 * @param x The denominator.
 * @return The arctangent of the quotient y / x.
 */
extern fn atan2(f64, f64) f64;

/**
 * Computes the sine of a given single-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The sine of the input value.
 */
pub extern fn "llvm.sin.f32" as sin(f32) f32;
/**
 * Computes the sine of a given double-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The sine of the input value.
 */
pub extern fn "llvm.sin.f64" as sin(f64) f64;

/**
 * Computes the cosine of a given single-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The cosine of the input value.
 */
pub extern fn "llvm.cos.f32" as cos(f32) f32;
/**
 * Computes the cosine of a given double-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The cosine of the input value.
 */
pub extern fn "llvm.cos.f64" as cos(f64) f64;

/**
 * Computes the hyperbolic cosine of a given double-precision floating-point number.
 *
 * @param x The input value.
 * @return The hyperbolic cosine of the input value.
 */
pub extern fn cosh(f64) f64;
/**
 * Computes the hyperbolic sine of a given double-precision floating-point number.
 *
 * @param x The input value.
 * @return The hyperbolic sine of the input value.
 */
pub extern fn sinh(f64) f64;

/**
 * Computes the arccosine of a given double-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The arccosine of the input value.
 */
pub extern fn acos(f64) f64;
/**
 * Computes the arcsine of a given double-precision floating-point number.
 *
 * @param x The input value (in radians).
 * @return The arcsine of the input value.
 */
pub extern fn asin(f64) f64;

/**
 * Computes the natural logarithm of a given single-precision floating-point number.
 *
 * @param x The input value.
 * @return The natural logarithm of the input value.
 */
pub extern fn "llvm.log.f32" as log(f32) f32;
/**
 * Computes the natural logarithm of a given double-precision floating-point number.
 *
 * @param x The input value.
 * @return The natural logarithm of the input value.
 */
pub extern fn "llvm.log.f64" as log(f64) f64;

/**
 * @brief Calculates the base-10 logarithm of a 32-bit floating-point number.
 * 
 * @param x The input number.
 * @return The base-10 logarithm of the input number.
 */
pub extern fn "llvm.log10.f32" as log10(f32) f32;
/**
 * Compute the base-10 logarithm of a double-precision floating-point number.
 *
 * @param x The input value.
 * @return The base-10 logarithm of the input value.
 */
pub extern fn "llvm.log10.f64" as log10(f64) f64;

/**
 * Compute the base-2 logarithm of a single-precision floating-point number.
 *
 * @param x The input value.
 * @return The base-2 logarithm of the input value.
 */
pub extern fn "llvm.log2.f32" as log2(f32) f32;
/**
 * Compute the base-2 logarithm of a double-precision floating-point number.
 *
 * @param x The input value.
 * @return The base-2 logarithm of the input value.
 */
pub extern fn "llvm.log2.f64" as log2(f64) f64;


/**
 * Compute the mantissa and exponent of a double-precision floating-point number.
 *
 * @param value The input value.
 * @param exp Pointer to a variable that will be set to the exponent.
 * @return The mantissa of the input value.
 */
pub extern fn frexp(f64, i32) f64;
/**
 * Multiply a double-precision floating-point number by 2 raised to a power.
 *
 * @param x The input value.
 * @param exp The exponent to raise 2 to.
 * @return The input value multiplied by 2 raised to the exponent.
 */
pub extern fn ldexp(f64, i32) f64;
/**
 * Compute the square root of a double-precision floating-point number.
 *
 * @param x The input value.
 * @return The square root of the input value.
 */
pub extern fn sqrt(f64) f64;

/**
 * Compute the largest integer value not greater than a single-precision
 * floating-point number.
 *
 * @param x The input value.
 * @return The largest integer value not greater than the input value.
 */
pub extern fn "llvm.floor.f32" as floor(f32) f32;
/**
 * Compute the largest integer value not greater than a double-precision
 * floating-point number.
 *
 * @param x The input value.
 * @return The largest integer value not greater than the input value.
 */
pub extern fn "llvm.floor.f64" as floor(f64) f64;

/**
 * Compute the smallest integer value not less than a single-precision
 * floating-point number.
 *
 * @param x The input value.
 * @return The smallest integer value not less than the input value.
 */
pub extern fn "llvm.ceil.f32" as ceil(f32) f32;
/**
 * Compute the smallest integer value not less than a double-precision
 * floating-point number.
 *
 * @param x The input value.
 * @return The smallest integer value not less than the input value.
 */
pub extern fn "llvm.ceil.f64" as ceil(f64) f64;

/**
 * Compute the integer and fractional parts of a double-precision floating-point number.
 *
 * @param x The input value.
 * @param intpart Pointer to a variable that will be set to the integer part.
 * @return The fractional part of the input value.
 */
pub extern fn modf(f64, f64) f64;
/**
 * Calculates the floating-point remainder of dividing the first argument by the second argument.
 * @param x The dividend.
 * @param y The divisor.
 * @return The floating-point remainder of x / y.
 * @example fmod(10.5, 3.2) // returns 0.9000000000000004
 */
pub extern fn fmod(f64, f64) f64;
/**
 * Raises the first argument to the power of the second argument.
 * @param base The base value.
 * @param exponent The exponent value.
 * @return The result of raising base to the power of exponent.
 * @example pow(2.5, 3.0) // returns 15.625
 */
pub extern fn pow(f64, f64) f64;

/**
 * Calculates the arctangent of the given value in radians.
 * @param x The input value.
 * @return The arctangent of x in radians.
 * @example atan(0.5) // returns 0.4636476090008061
 */
pub extern fn atan(f64) f64;
/**
 * Calculates the arctangent of the given pair of values.
 * @param n1 The first input value.
 * @param n2 The second input value.
 * @return The arctangent of n1/n2, in the range [-pi, pi].
 * @example atan(2.0, 3.0) // returns 0.5880026035475675
 */
pub fn atan(n1: f64, n2: f64) f64 => atan2(n1, n2);

/**
 * Calculates the tangent of the given angle in radians.
 * @param x The input angle in radians.
 * @return The tangent of x.
 * @example tan(0.8) // returns 1.0296385570503641
 */
pub fn tan(x: f32) f32 => sin(x) / cos(x)
pub fn tan(x: f64) f64 => sin(x) / cos(x)

/**
 * Calculates the absolute value of the given signed integer.
 * @param x The input value.
 * @return The absolute value of x.
 * @example abs(-5) // returns 5
 */
pub fn abs(x: i16) i16 => (x < 0) ? -x : x
pub fn abs(x: i32) i32 => (x < 0) ? -x : x
pub fn abs(x: i64) i64 => (x < 0) ? -x : x

/**
 * Calculates the absolute value of the given floating-point number.
 * @param x The input value.
 * @return The absolute value of x.
 * @example abs(-2.5) // returns 2.5
 */
pub extern fn "llvm.fabs.f32" as abs(f32) f32;
pub extern fn "llvm.fabs.f64" as abs(f64) f64;

/**
 * Calculates the truncation of the given floating-point number.
 * @param x The input value.
 * @return The truncated value of x.
 * @example trunc(2.7) // returns 2.0
 */
pub extern fn "llvm.trunc.f32" as trunc(f32) f32;
pub extern fn "llvm.trunc.f64" as trunc(f64) f64;

// constants
/**
 * The constant value of pi, accurate to 35 decimal places.
 * @example PI // returns 3.141592653589793238462643383279502884197
 */
pub const PI = 3.141592653589793238462643383279502884197;
/**
 * @brief The natural logarithm of pi.
 */
pub const logpi = 1.144729885849400174143427351353058711647;
/**
 * @brief The square root of pi.
 */
pub const sqrtpi = 1.772453850905516027298167483341145182798;
/**
 * @brief Positive infinity constant.
 */
pub const inf = strtod("Inf", 0);

/**
 * @brief NaN constant.
 * 
 * @note This needs to be defined using `strtod` as there is no built-in NaN value in C++.
 * @todo Implement `nanf` and `nanl` functions to define `nanf` and `nanl` constants respectively.
 */
pub const nan = strtod("NaN", 0);

/**
 * @brief Check if a floating-point number is NaN (not-a-number).
 * 
 * @param x The number to check.
 * @return True if `x` is NaN, false otherwise.
 */
pub fn is_nan(x: f64) Bool => isnan(x);
/**
 * @brief Check if a floating-point number is infinite.
 * 
 * @param x The number to check.
 * @return True if `x` is infinite, false otherwise.
 */
pub fn is_infinite(x: f64) Bool => isinf(x);

