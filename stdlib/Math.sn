

/**
 * Checks if a given floating-point number is NaN.
 *
 * @param x The floating-point number to check.
 * @return True if the given number is NaN, false otherwise.
 */
extern fn isnan(f64) Bool;
/**
 * Checks if a given floating-point number is infinite.
 *
 * @param x The floating-point number to check.
 * @return True if the given number is infinite, false otherwise.
 */
extern fn isinf(f64) Bool;

// constants
/**
 * The constant value of pi, accurate to 35 decimal places.
 * @example PI // returns 3.141592653589793238462643383279502884197
 */
pub const PI = 3.141592653589793238462643383279502884197;
/**
 * @brief The natural logarithm of pi.
 */
pub const logpi = 1.144729885849400174143427351353058711647;
/**
 * @brief The square root of pi.
 */
pub const sqrtpi = 1.772453850905516027298167483341145182798;
/**
 * @brief Positive infinity constant.
 */
pub const inf = strtod("Inf", 0);

/**
 * @brief NaN constant.
 * 
 * @note This needs to be defined using `strtod` as there is no built-in NaN value in C++.
 * @todo Implement `nanf` and `nanl` functions to define `nanf` and `nanl` constants respectively.
 */
pub const nan = strtod("NaN", 0);

/**
 * @brief Check if a floating-point number is NaN (not-a-number).
 * 
 * @param x The number to check.
 * @return True if `x` is NaN, false otherwise.
 */
pub fn is_nan(x: f64) bool => isnan(x);
/**
 * @brief Check if a floating-point number is infinite.
 * 
 * @param x The number to check.
 * @return True if `x` is infinite, false otherwise.
 */
pub fn is_infinite(x: f64) bool => isinf(x);

