
use Core::CLib

/**
 * @brief Causes normal program termination to occur.
 * @param exit_code(i32) - exit status of the program
 * @note(1) The behavior is undefined if a program calls exit more than once.
 *
 * @c Core::CLib::exit
 */
pub fn exit(exitCode: i32 = 0) { CLib::exit(exitCode); }
/**
 * @brief Utility function to print a new line to stdout.
 */
pub fn printNewLine() { CLib::putchar('\n'); }
/**
 * @brief Writes a string to @param stream and it also writes a new line
 *  additionally
 * @param msg(String) - string to print
 * @return On success, the total number of characters written is returned.
 */
pub fn println(msg: String) i32 { primitiveTypePrintln(msg); }
/**
 * @brief Writes a i32-bit allocated integer to @param stream and it also writes a new line
 *  additionally
 * @param msg(String) - i32 to print
 * @return On success, the total number of characters written is returned.
 */
pub fn println(msg: i32) i32 { primitiveTypePrintln(msg); }
/**
 * @brief Writes a i64-bit allocated integer to @param stream and it also writes a new line
 *  additionally
 * @param msg(String) - i64 to print
 * @return On success, the total number of characters written is returned.
 */
pub fn println(msg: i64) i32 { primitiveTypePrintln(msg); }
/**
 * @brief Writes a f32-bit allocated float to @param stream and it also writes a new line
 *  additionally
 * @param msg(String) - f32 to print
 * @return On success, the total number of characters written is returned.
 */
pub fn println(msg: f32) i32 { primitiveTypePrintln(msg); }
/**
 * @brief Writes a f64-bit allocated real to @param stream and it also writes a new line
 *  additionally
 * @param msg(String) - f64 to print
 * @return On success, the total number of characters written is returned.
 */
pub fn println(msg: f64) i32 { primitiveTypePrintln(msg); }

pub fn print(msg: String) i32 { return CLib::printf("%s",  msg); }
pub fn print(msg: bool  ) i32 { return CLib::printf("%i",  msg); }
pub fn print(msg: i8    ) i32 { return print(msg as i32);        }
pub fn print(msg: i16   ) i32 { return print(msg as i32);        }
pub fn print(msg: i32   ) i32 { return CLib::printf("%i",  msg); }
pub fn print(msg: i64   ) i32 { return CLib::printf("%ld", msg); }
pub fn print(msg: f32   ) i32 { return CLib::printf("%f",  msg); }
pub fn print(msg: f64   ) i32 { return CLib::printf("%f",  msg); }

/**
 * @brief Used to take user input. By default, it returns the user input in form of
 *  a string.
 * @param __p(String) - prompt to print
 * @return What the user entered in the stdin stream.
 */
pub fn input(__p: String = "") String {
    print(__p)
    return _input()
}


// - Mark: Private functions
extern fn "sn.core.libs.System.input" as _input() String;

fn primitiveTypePrintln<PrimitiveType>(msg: PrimitiveType) i32 {
    let ret = print(msg);
    printNewLine();

    return ret;
}
