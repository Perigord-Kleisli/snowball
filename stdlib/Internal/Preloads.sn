class [[extends]] char {
  public:
    operator func [[__internal__, __no_pointer_self__]] +(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] -(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] *(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] /(other: char)  f32 {}
    operator func [[__internal__, __no_pointer_self__]] %(other: char)  f32 {}
    operator func [[__internal__, __no_pointer_self__]] ^(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] |(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] &(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] <<(other: char) char {}
    operator func [[__internal__, __no_pointer_self__]] <(other: char)  bool {}
    operator func [[__internal__, __no_pointer_self__]] >(other: char)  bool {}
    operator func [[__internal__, __no_pointer_self__]] <=(other: char) bool {}
    operator func [[__internal__, __no_pointer_self__]] >=(other: char) bool {}
    operator func [[__internal__, __no_pointer_self__]] -()             char {}
    mut operator func [[__internal__, __no_pointer_self__]] +=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] -=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] *=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] /=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] %=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] ^=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] |=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] &=(other: char) char {}
    mut operator func [[__internal__, __no_pointer_self__]] <<=(other: char)char {}
    mut operator func [[__internal__, __no_pointer_self__]] >>=(other: char)char {}
    mut operator func [[__internal__, __no_pointer_self__]] =(other: char)  char {}
    operator func [[__internal__, __no_pointer_self__]] !=(other: char) char {}
    operator func [[__internal__, __no_pointer_self__]] !()             bool {}
    operator func [[__internal__]]                      !()             bool {}
    operator func [[__internal__, __no_pointer_self__]] ||(other: char) bool {}
    operator func [[__internal__, __no_pointer_self__]] &&(other: char) bool {}
    operator func [[__internal__, __no_pointer_self__]] ==(other: char) bool {}

    // override with &char
    operator func [[__internal__]] =(other: &char) &char {}
    operator func [[__internal__]] =(other: char) &char {}

  /**
   * @brief It performs equality check between a string strings of characters.
   * @param[in] other The string to compare the character with.
   * @return The result of the comparison.
   *
   * @note It needs to be a c-string compatible type in order to make sure
   *       we find a null terminator.
   * @note If any of the strings is null, it returns false.
   *    If both are null, it returns true.
   */
  operator func [[internal_linkage, inline]] ==(other: *const char) bool
  {
    let this = self as *const char;
    if !self && !other 
      { return true; }
    if !self || !other 
      { return false; } 
    let mut i = 0;
    while this[i] != 0 && other[i] != 0 
    {
      if this[i] != other[i] 
      {
        return false;
      }
      i = i + 1;
    }
  }
}

class [[__internal__]] *const <T> {
  public:
    unsafe operator func [[inline, llvm_function]] +(self: *const T, other: i64) *const T
    { 
      %0 = getelementptr {=T}, {=*const T} %self, i64 %other
      ret {=*const T} %0
    } 

    unsafe func [[inline, llvm_function]] as_ref(self: *const T) &T 
    {
      ret {=*const T} %self
    }

    operator func [[__internal__]] =(self: *const T, other: *const T) *const T {}

    func [[inline, llvm_function]] is_null(self: *const T) bool
    {
      %0 = icmp eq {=*const T} %self, null
      ret i1 %0
    }

    func [[inline]] unchecked_get(self: *const T, index: i32) &T
    {unsafe{
      return (self + index).as_ref();
    }}

    operator func [[inline, llvm_function(sanitise_void_return)]] [](self: *const T, index: i64) T
    { 
      %0 = getelementptr inbounds {=T}, {=*const T} %self, i64 0
      %1 = load {=T}, {=*const T} %0, align 1
      ret {=T} %1
    }
    operator func !(self: *const T) bool { return self.is_null(); }
}

class [[__internal__]] *mut <T> {
  public:
    unsafe operator func [[inline, llvm_function]] +(mut self: *const T, other: i64) *mut T
    { 
      %0 = getelementptr {=T}, {=*mut T} %self, i64 %other
      ret {=*mut T} %0
    } 

    unsafe func [[inline, llvm_function]] as_ref(mut self: *const T) &T 
    {
      ret {=*mut T} %self
    }

    mut operator func [[__internal__]] =(mut self: *const T, mut other: *const T) *mut T {}

    func [[inline, llvm_function]] is_null(mut self: *mut T) bool
    {
      %0 = icmp eq {=*mut T} %self, null
      ret i1 %0
    }

    func [[inline]] unchecked_get(mut self: *mut T, index: i32) &mut T
    {unsafe{
      return (self + index).as_ref();
    }}

    operator func [[inline, llvm_function(sanitise_void_return)]] [](mut self: *mut T, index: i64) T
    { 
      %0 = getelementptr inbounds {=T}, {=*mut T} %self, i64 0
      %1 = load {=T}, {=*mut T} %0, align 1
      ret {=T} %1
    }

    operator func [[inline]] !(mut self: *mut T) bool { return self.is_null(); }
}

/// @brief Integer type implementation.
/// @tparam IntegerType The integer type to implement.
/// @details This class implements the integer type.
/// @note This class is not meant to be used directly.
/// @internal
class [[__internal__]] IntegerImpl<IntegerType> {
  public:
    // Equality operators
    operator func [[__internal__]] ==(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]] !=(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]]  <(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]]  >(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]] <=(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]] >=(self: IntegerType, other: IntegerType) bool {} 

    // Assignment operators
    mut operator func [[__internal__]] =(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] =(self: &IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] =(self: &IntegerType, other: &IntegerType) IntegerType {}
    mut operator func [[__internal__]] +=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] -=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] *=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] /=(self: IntegerType, other: IntegerType) f32 {}
    mut operator func [[__internal__]] %=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] ^=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] |=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] &=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] <<=(self: IntegerType, other: IntegerType) IntegerType {}
    mut operator func [[__internal__]] >>=(self: IntegerType, other: IntegerType) IntegerType {}

    // Arithmetic operators
    operator func [[__internal__]] +(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] -(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] -(self: IntegerType) IntegerType {}
    operator func [[__internal__]] +(self: IntegerType) IntegerType {}
    operator func [[__internal__]] *(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] /(self: IntegerType, other: IntegerType) f32 {}
    operator func [[__internal__]] %(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] ^(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] |(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] &(self: IntegerType, other: IntegerType) IntegerType {}
    operator func [[__internal__]] <<(self: IntegerType, other: IntegerType) IntegerType {}
    //operator func [[__internal__]] >>(self: IntegerType, other: IntegerType) IntegerType {}

    // Unary operators
    operator func [[__internal__]] -(self: IntegerType) IntegerType {}
    operator func [[__internal__]] +(self: IntegerType) IntegerType {}

    // Logical operators
    operator func [[__internal__]] !(self: IntegerType) bool {}
    operator func [[__internal__]] &&(self: IntegerType, other: IntegerType) bool {}
    operator func [[__internal__]] ||(self: IntegerType, other: IntegerType) bool {}
}


