class [[extends]] char {
  pub:
    /**
    * @brief It creates a `+` operator for the character.
    * @param[in] other The character to concatenate the character with.
    * @return The addition result.
    */
    operator [[inline, llvm_function]] +(other: i32) &char 
    { 
      %0 = getelementptr i8, ptr %self, i32 %other
      ret ptr %0
    }

    /**
     * @brief It creates an index operator for the character.
     * @param[in] index The index of the character to get.
     * @return The character at the specified index.
     */
    operator [[inline, llvm_function]] [](index: i32) char
    { 
      %0 = getelementptr i8, ptr %self, i32 %index
      %1 = load i8, ptr %0, align 1
      ret i8 %1
    }

    /**
     * @brief It creates an index operator for the character.
     * @param[in] index The index of the character to get.
     * @return The character at the specified index.
     */
    fn [[inline, llvm_function]] at(index: i32) &char
    { 
      %0 = getelementptr ptr, ptr %self, i32 %index
      ret ptr %0
    }

    /**
     * @brief It inserts a character into the string.
     * @param[in] index The index to insert the character at.
     * @param[in] character The character to insert.
     * @return The character at the specified index.
     */
    mut fn [[inline, llvm_function]] insert(index: i32, character: char) &char
    { 
      %0 = getelementptr ptr, ptr %self, i32 %index
      store i8 %character, ptr %0, align 1
      ret ptr %0
    }

    operator [[__internal__, __no_pointer_self__]] +(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] -(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] *(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] /(other: char)  f32 {}
    operator [[__internal__, __no_pointer_self__]] %(other: char)  f32 {}
    operator [[__internal__, __no_pointer_self__]] ^(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] |(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] &(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] <<(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] <(other: char)  bool {}
    operator [[__internal__, __no_pointer_self__]] >(other: char)  bool {}
    operator [[__internal__, __no_pointer_self__]] <=(other: char) bool {}
    operator [[__internal__, __no_pointer_self__]] >=(other: char) bool {}
    operator [[__internal__, __no_pointer_self__]] ==(other: char) bool {}
    operator [[__internal__, __no_pointer_self__]] !=(other: char) bool {}
    operator [[__internal__, __no_pointer_self__]] -()             char {}
    operator [[__internal__, __no_pointer_self__]] +=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] -=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] *=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] /=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] %=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] ^=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] |=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] &=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] <<=(other: char)char {}
    operator [[__internal__, __no_pointer_self__]] >>=(other: char)char {}
    operator [[__internal__, __no_pointer_self__]] =(other: char)  char {}
    operator [[__internal__, __no_pointer_self__]] !=(other: char) char {}
    operator [[__internal__, __no_pointer_self__]] !()             bool {}
    operator [[__internal__]]                      !()             bool {}
    operator [[__internal__, __no_pointer_self__]] ||(other: char) bool {}
    operator [[__internal__, __no_pointer_self__]] &&(other: char) bool {}

    // override with &char
    operator [[__internal__]] =(other: &char) &char {}
    operator [[__internal__]] =(other: char) &char {}
}

class [[__internal__]] *const <T> {
  pub:
    unsafe operator [[inline, llvm_function]] +(self: *const T, other: i32) *const T
    { 
      %0 = getelementptr ptr, ptr %self, i32 %other
      ret ptr %0
    } 

    unsafe fn [[inline, llvm_function]] as_ref<>(self: *const T) &T 
    {
      ret ptr %self
    }

    operator [[__internal__]] =(self: *const T, other: *const T) *const T {}

    fn [[inline, llvm_function]] is_null(self: *const T) bool
    {
      %0 = icmp eq ptr %self, null
      ret i1 %0
    }
}
