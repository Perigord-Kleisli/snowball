
@extends
class char {
  public:
    @__internal__ 
    @__no_pointer_self__ 
    operator func +(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func -(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func *(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func /(other: char)  f32 {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func %(other: char)  f32 {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func ^(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func |(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func &(other: char)  char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func <<(other: char) char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func <(other: char)  bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func >(other: char)  bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func <=(other: char) bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func >=(other: char) bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func -() char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func +=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func -=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func *=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func /=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func %=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func ^=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func |=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func &=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func <<=(other: char)char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func >>=(other: char)char {}

    @__internal__ 
    @__no_pointer_self__
    mut operator func =(other: char)  char {}

    @__internal__ operator func !() bool {}

    @__internal__ 
    @__no_pointer_self__
    operator func !=(other: char) char {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func !() bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func ||(other: char) bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func &&(other: char) bool {}

    @__internal__ 
    @__no_pointer_self__ 
    operator func ==(other: char) bool {}

    // override with &char
    @__internal__ operator func =(other: &char) &char {}
    @__internal__ operator func =(other: char) &char {}

  /**
   * @brief It performs equality check between a string strings of characters.
   * @param[in] other The string to compare the character with.
   * @return The result of the comparison.
   *
   * @note It needs to be a c-string compatible type in order to make sure
   *       we find a null terminator.
   * @note If any of the strings is null, it returns false.
   *    If both are null, it returns true.
   */
  @internal_linkage
  @inline
  operator func ==(other: *const char) bool
  {
    let this = self as *const char;
    if !self && !other 
      { return true; }
    if !self || !other 
      { return false; } 
    let mut i = 0;
    while this[i] != 0 && other[i] != 0 
    {
      if this[i] != other[i] 
      {
        return false;
      }
      i = i + 1;
    }
  }
}

@__internal__
class *const <T> {
  public:
    @inline
    @llvm_function
    unsafe operator func +(self: *const T, other: i64) *const T
    { 
      %0 = getelementptr {=T}, {=*const T} %self, i64 %other
      ret {=*const T} %0
    } 

    @inline
    @llvm_function
    unsafe func as_ref(self: *const T) &T 
    {
      ret {=*const T} %self
    }

    @__internal__
    operator func =(self: *const T, other: *const T) *const T {}

    @inline
    @llvm_function
    func is_null(self: *const T) bool
    {
      %0 = icmp eq {=*const T} %self, null
      ret i1 %0
    }

    @inline
    func unchecked_get(self: *const T, index: i32) &T
    {
      unsafe{
        return (self + index).as_ref();
      }
    }

    @inline
    @llvm_function(sanitise_void_return)
    operator func [](self: *const T, index: i64) T
    { 
      %0 = getelementptr inbounds {=T}, {=*const T} %self, i64 0
      %1 = load {=T}, {=*const T} %0, align 1
      ret {=T} %1
    }

    @inline
    operator func !(self: *const T) bool { return self.is_null(); }
}

@__internal__
class *mut <T> {
  public:
    @inline
    @llvm_function
    unsafe operator func +(mut self: *const T, other: i64) *mut T
    { 
      %0 = getelementptr {=T}, {=*mut T} %self, i64 %other
      ret {=*mut T} %0
    } 

    @inline
    @llvm_function
    unsafe func as_ref(mut self: *const T) &T 
    {
      ret {=*mut T} %self
    }

    @__internal__
    mut operator func =(mut self: *const T, mut other: *const T) *mut T {}

    @inline
    @llvm_function
    func is_null(mut self: *mut T) bool
    {
      %0 = icmp eq {=*mut T} %self, null
      ret i1 %0
    }

    @inline
    func unchecked_get(mut self: *mut T, index: i32) &T
    {
      unsafe{
        return (self + index).as_ref();
      }
    }

    @inline
    @llvm_function(sanitise_void_return)
    operator func [](mut self: *mut T, index: i64) T
    { 
      %0 = getelementptr inbounds {=T}, {=*mut T} %self, i64 0
      %1 = load {=T}, {=*mut T} %0, align 1
      ret {=T} %1
    }

    @inline
    operator func !(mut self: *mut T) bool { return self.is_null(); }
}

/// @brief Integer type implementation.
/// @tparam IntegerType The integer type to implement.
/// @details This class implements the integer type.
/// @note This class is not meant to be used directly.
/// @internal
@__internal__
class IntegerImpl<IntegerType> {
  public:
    // Equality operators
    @__internal__ operator func ==(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func !=(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func  <(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func  >(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func <=(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func >=(self: IntegerType, other: IntegerType) bool {} 

    // Assignment operators
    @__internal__ mut operator func =(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func =(self: &IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func =(self: &IntegerType, other: &IntegerType) IntegerType {}
    @__internal__ mut operator func +=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func -=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func *=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func /=(self: IntegerType, other: IntegerType) f32 {}
    @__internal__ mut operator func %=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func ^=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func |=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func &=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func <<=(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ mut operator func >>=(self: IntegerType, other: IntegerType) IntegerType {}

    // Arithmetic operators
    @__internal__ operator func +(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func -(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func -(self: IntegerType) IntegerType {}
    @__internal__ operator func +(self: IntegerType) IntegerType {}
    @__internal__ operator func *(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func /(self: IntegerType, other: IntegerType) f32 {}
    @__internal__ operator func %(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func ^(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func |(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func &(self: IntegerType, other: IntegerType) IntegerType {}
    @__internal__ operator func <<(self: IntegerType, other: IntegerType) IntegerType {}
    // @__internal__ operator func >>(self: IntegerType, other: IntegerType) IntegerType {}

    // Unary operators
    @__internal__ operator func -(self: IntegerType) IntegerType {}
    @__internal__ operator func +(self: IntegerType) IntegerType {}

    // Logical operators
    @__internal__ operator func !(self: IntegerType) bool {}
    @__internal__ operator func &&(self: IntegerType, other: IntegerType) bool {}
    @__internal__ operator func ||(self: IntegerType, other: IntegerType) bool {}
}


